//лабораторная работа №1 по курсу Dec-C100
/*
	В результате выполнения данной работы слушатель получает много мелких но необходимых
	для дальнейшей работы навыков, поэтому задание построено как последовательность 
	закомментированных блоков, которые требуется последовательно раскомментировать, 
	отвечая  при этом на поставленные вопросы.

	Примерная последовательность действий при отладке проекта:
	1. наберите (исправьте, раскомментируйте нужный фрагмент) исходный текст программы;
	2. откомпилируйте (Build/Compile  ***.cpp или Ctrl+F7)
		Замечание: этот этап явно вызывать необязательно, но полезно для начинающего 6
			программиста, т.к. позволяет увидеть ошибки (errors) и предупреждения
			(warnings), возникающие при компиляции данного конкретного файла;
	3. скомпонуйте проект(Build/Build ***.exe или F7)
		Замечание 1: этот этап тоже необязателен, но настоятельно рекомендуем, т.к. 
			позволяет перекомпилировать только измененные файлы и в случае отсутствия
			ошибок всегда полезно посмотреть на выдаваемые компилятором замечания;
		Замечание 2: перед тем, как строить проект, неплохо убедиться  в том, что 
			исполняемый код будет содержать информацию для отладчика - 
				(Build/Configuration Manager.../Configuration - Debug - тип сборки проекта);
	4. поставьте на интересующих Вас строках исходного кода точки останова (breakpoints) - F9 или 
		просто кликните левой кнопкой на левой серой полосе окна редактирования; 
	5. запустите программу в режиме отладки 
		(Debug/Start... или  F5);
	6."Перемещаться" по коду во время отладки можно по шагам (от строки к строке). Для этого можно использовать клавишу F10.
	7. Кроме того, можно переходить от одной "точки останова" к другой посредством F5.
	8. ВАЖНО!!! Когда программа останавливается на некоторой "точке останова", то код инструкций, находящихся на соответствующей строке
       еще не выполнен! Для того, чтобы он выполнился, требуется сделать "шаг", т.е. нажать клавишу F10 или кнопку Step Over. 	   

  Замечание: для перечисленных выше действий приведены комбинации клавиш и соответствующие 
		пункты меню, однако во многих случаях гораздо быстрее то же самое можно сделать с 
		помощью кнопок на Tool Bar, в чем слушатель может преуспеть самостоятельно.

*/


#include  <climits>
#include <cfloat>
#include <iostream>



int nTwin=1;			//глобальная переменная
extern int nTest;		//? 
namespace TwinSpace { int nTwin = 2; }	//переменная объявлена в
						//пространстве имен - TwinSpace

#define	  stop __asm nop	//с помощью макроподстановки задаем "пустую" команду.
							//Эта макроподстановка нужна только для того, чтобы
							//можно было поставить на этой строке точку останова.

int main()
{
 //**********************************************************
	//Задание 1. Работа с отладчиком. Базовые типы данных. Выполняя программу по шагам, 
	//следите за значениями переменных и интерпретируйте результат (помните, что 
	//количество байт, отводимых под int, системо-зависимо).
	//Обратите внимание на разную интерпретацию отладчиком signed и unsigned целых типов 
	//данных, а также на внутреннее представление отрицательных целых чисел.

	//Рядом с каждой строкой кода напишите комментарий, в котором укажите значение
	//переменной ПОСЛЕ выполнения соооветствующей инструкции
	//Помните, что если Вы поставили точку останова на какой-то строке, то отладчик
	//остановится ДО выполнения инструкции
	//чтобы продвигаться по коду пошагово, можно использовать клавишу F10 или кнопку Step Over

	//Для того, чтобы во ВРЕМЯ ОТЛАДКИ наблюдать за значениями переменных, можно использовать окошки "Autos", "Locals", "Watch"
	// окошко "Watch" удобно тем, что тем можно вводить не только имена наблюдаемых переменных, 
	//но и выражения, которые Вы хотели бы вычислить
	// Для того, чтобы увидеть 16-ричное представление значения, надо в контекстном меню  одного из окошек "Autos", "Locals", "Watch"
	// выбрать флажок Hexadecimal Display, для того, чтобы вернуться к 10-чному представлению - снять флажок Hexadecimal Display

	//Подсказка: очень удобно для просмотра значений  не самим набирать текст, а копировать его из окна просмотра
	
	
	char cByte = 'A'; //65  'A'  ,		cByte	0x41 'A'	char

	cByte    = 0x42; //0x42 'B'  		cByte	0x42 'B'	char

	cByte    = 66;  //?		

	cByte    = -1;    //?
	
	unsigned char ucByte = 0x41;  //?
	ucByte   = 'B';//?
	ucByte   =	-1; //?

	int iInt =  0xffffffff; //?

	unsigned int uiInt = 0xffffffff; //?

	float fFloat = 1.f;  //?

	double dDouble = 1.; //?

	// Выполните фрагмент, приведенный далее. В комментариях отразите,
	// что реально заносится в переменную. Объясните разницу между этим 
	// значением и инициализатором.
	

	double d = 0.1234567890123456789123456789; // 
	float  f = d;//?

	
	d	=	1.; //?
	d	=	0.999999999999999999999999999999999; //?

	stop
	
	// В комментариях напишите результат, возвращаемый оператором sizeof для
	// переменной типа wchar_t (ее размер)
	wchar_t cw = L'Ф';	   //?
	size_t n = sizeof(cw); //?

	stop


// **************************************************************
	//Задание 2a. Неявное приведение типов данных.
	//Объясните разницу результата при выполнении (1) и (2):
	//Покажите явно (напишите в коде) преобразования, которые неявно выполняет компилятор

	iInt=1;
	double dDouble1=iInt/3;		//? (1)		dDouble1	0.0000000000000000	double. Выполнено целочисленное деление, результат раверн двум. Тип int приведен к типу double. В итоге получили ноль. 


	double dDouble2=iInt/3.;	//? (2)		dDouble2	0.33333333333333331	double. Приведение к iint к double. Выполнение деления.



	// Ассоциативность операторов.
	// Синтаксис языка C допускает "цепочечное" присваивание
	// (как в строках (1) и (2)). Посмотрев результаты выполнения строк (1) и (2)
	// (значения переменных dDouble, fFloat, nInt, sShort, cByte), определите порядок 
	// выполения присваиваний при цепочечной записи и объясните результат.
	// Расставте скобки, явно определяющие порядок выполнения, как это сделал бы компилятор.
	// Объясните (в комментариях) предупреждения (warnings) компилятора.
	//
	short sShort;
	dDouble=(fFloat=(iInt=(sShort=(cByte=3.3/3))));			// (1)преобразование, потеря данных.
	
	cByte=sShort=iInt=fFloat=dDouble=3.3/3;			// (2)преобразование, потеря данных.

	//ниже Вам дан пример "небрежного" использования неявного приведения типов, что может 
	// привести к нежелательным результатам - объясните (в комментариях), к каким?
	// Напишите явно преобразования, которые неявно выполняет компилятор
	//Используйте оператор приведения типа static_cast

	iInt	=	257;						//Hexadecimal Display: 257
	cByte	=iInt;							//har вмещает в себя значения до 255, 256 - переполнение, компилятор записывает 0, 257 соответственно 1


	unsigned char cN1=255, cN2=2, cSum;
	cSum = cN1 + cN2;				//		cSum	1 '\x1'	unsigned char


	//Сравните предыдущую строчку с приведенной ниже. Объясните (в комментариях),
	//почему в следующей строке не происходит выход за разрядную сетку
	// Напишите явно преобразования, которые неявно выполняет компилятор
	int iSum = cN1+cN2; //257

	//Напишите, почему при сложении одинаковых значений (одинаковых в двоичной системе) 
	// в строках (1) и (2) получаются разные результаты
	// Напишите явно преобразования, которые неявно выполняет компилятор и объясните,
	// что при этом происходит
	char c1=0xff, c2=2;
	unsigned char uc1=0xff, uc2=2;
	int iSum1 = (int)(c1) + (int)c2;   //(1) 0xff в знаковом типе char представляется как -1, -1+2=1
	int iSum2 = (int)(uc1 + uc2); //(2) 0xff в беззнаковом типе char представляется как 255

	stop
	
// ***********************************************************
	//Задание 2b. Явное приведение типов данных.
	//Проинтерпретируйте результат (значения переменной dDouble) в строке (3)
	// Напишите явно преобразования, которые неявно выполняет компилятор
	int nTmp=100, nn=3;
	dDouble=3.3 + nTmp / nn; // (3) =?	происходит целочисленное деление затем приведение к типо double и сложение
//	dDouble	36.299999999999997	double  


	//Получите результат без потери точности с помощью оператора явного
	//приведения типа
	double dDouble3=3.3 + double(nTmp) / nn;		// (4)		dDouble3	36.633333333333333	double



// *******************************************************
		// Задание 3. Область действия, область видимости и
			//				время существования переменных

		
	// Задание 3.1.
	// В этом фрагменте фигурируют четыре переменных с одним и тем же именем 
	// nTwin - одна глобальная, вторая определена в своем пространстве имен, 
	// (определены выше в начале модуля) третья - локальная внутри функции main(), 
	// четвертая - вложенная локальная внутри блока. 
	//   В данном задании требуется в выделенных местах фрагмента определить и откомментировать,
	// к какой из четырех переменных идет обращение (к глобальной, из пространства имен, к локальным),
	//а также факт существования и видимости для всех четырех

	//	Для выполнения задания рекомендуется пользоваться окнами "Locals" и "Watches"
	// Подсказка: - в окно "Watches" можно поместить как nTwin
	//			так и ::nTwin, впрочем как и TwinSpace::nTwin


		nTwin = 100; //?глобальная
		TwinSpace::nTwin = 300; //?в пространстве имен
		nTwin+=1;	//101 глобальная
		// Обратите внимание на небольшой "глюк" отладчика. Хотя локальная переменная nTwin
		// до следующей строки еще не определена (и формально даже не существует), но место
		// под нее в стеке функции main уже выделено (и там мусор). Если теперь в  окно 
		// "Watches" поместить просто nTwin, то отладчик будет показывать значение этой, еще 
		// не объявленной локальной переменной (что-то вроде -858993460 или 0xcccccccc), 
		// хотя должен формально показывать значение глобальной переменной, объявленной ранее.
		// Компилятор при этом все вычисляет верно.
		// Если надо увидеть именно значение глобальной переменной, то надо явно указать в окне
		// "Watches" глобальную область видимости, т.е. написать там ::nTwin.
		// Примечание: вот еще один аргумент за то, чтобы не создавать конфликты имен.
		int nTwin;		//?
		nTwin = 200;	//?
		::nTwin = ::nTwin + 1;	//? 
		{
			int nTwin;	//?локальная
			nTwin = -1;	//?локальная равна -1, но не равна.не определена не понятно
			::nTwin += 1;	//?   не понятно
			TwinSpace::nTwin+=1;	//301.из пространсва имен
		}

		nTwin-=1;	//?
	// Задание 3.2
	
		//В этом фрагменте фигурируют  три переменных с одним и тем же именем
		// nTest - глобальная (определена в другом модуле) вторая - локальная внутри main,  третья - локальная внутри блока, 
		nTest = 1000;
		int nTest = -2000;   
		stop
		{
			int nTest = 200;
			nTest += 2;			//?202
			stop
		}
		nTest += 2;			//?-1998

	

// *******************************************************
	// Задание 4. Спецификатор класса памяти - static
	// а) Для каждой итерации цикла напишите значения пременных nLocal# и nStatic#.
	// б) Напишите, когда выполняется инициализация переменных?
	// в) Поясните (в комментарии) разницу между способом инициализации 
	//     переменных nStatic1 и nStatic2 
	
	for (int i=0; i<3; i++)
	{
		static int nStatic1 = 100;
		int nLocal1 = 100;
		int nLocal2 = 200;
		static int nStatic2 = (nLocal2+=1) * 2;//тут происходит сначала вычисление потом инициализация получившимся результатом
		nStatic1+=1;//101 102 103
	nStatic2+=1;//401 404 405
		nLocal1+=1;//101 101 103
		std::cout << nLocal2;
		stop
//  Выведите на каждой итерации значения nLocal1, nLocal2, nStatic1, nStatic2  на консоль  и заполните табличку
//nLocal1=
//nLocal2=
//nStatic1=
//nStatic2=
	}
	// Напишите:
	//   а) как изменилось поведение пременной nStatic1?
	//   б) как эта переменная ИНИЦИАЛИЗИРОВАНА ?
	for (int i=0; i<3; i++)
	{
		static int nStatic1;  //?0
		nStatic1 = 100;//100 101
		int nLocal1 = 100;//100
		nStatic1+=1;//101 101
		nLocal1+=1;//101 101
		stop
//  Выведите на каждой итерации значения nLocal1, nStatic1 на консоль  и заполните табличку
	//nLocal1=
	//nStatic1=
	}



// *******************************************************
	// Задание 5. Перечисления - enum
	// Обратите внимание на явную и неявную инициализацию констант
	// Выполняя задание по шагам, следите за значениями, которые
	// принимает переменная myColors


	enum eColors
	{
		BLACK,
		BLUE,
		GREEN,
		RED=5,
		YELLOW,
		WHITE=RED+4
	};
	
	eColors   myColors;	//объявление переменной типа eColors 
	myColors=BLACK;
	myColors=BLUE;
	myColors=GREEN;
	myColors=RED;
	myColors=YELLOW;
	myColors=WHITE;

	int nnn = BLACK; //любой целочисленной переменной можно присвоить
					 //значение из списка инициализирующих значений

	//Именованные константы можно использовать в выражениях:
	nnn = BLUE + YELLOW;

	//Раскомментируйте следующую строку и обратите
	//внимание на  ошибку при компиляции 
//	myColors = 1;	//модифицируйте выражение таким образом, чтобы компилятор не выдывал ошибки
	myColors = static_cast<enum eColors>(1);
	// Выполните следующее присваивание НЕ меняя перечисление и тип переменной myColors?
//	myColors = 123;
	myColors = static_cast<enum eColors>(123);
	stop
	


// *******************************************************
	// Задание 6.1 Логический тип bool
	// Выполняя задание по шагам, следите за значениями
	// переменной b и интерпретируйте результат. Напишите эти значения в комментариях

	int nNumber = 1;
	bool b = (nNumber != 0); //		b	true	bool

	b = (nNumber == 0); //		b	false	bool

	b = (nNumber > 0); //b	true	bool
	b = (nNumber > 1); //		b	false	bool

	b = 5; //b	true	bool

	//Вы всегда можете преобразовать логическое значение к целому
	//явно или компилятор может это сделать самостоятельно (неявно)
	//Обратите внимание: как интерпретирует значения логических переменных компилятор?
	int tmp =  b + 1; //2.true это единица.1+1=2



// *******************************************************
	// Задание 7. Модификатор const и переменные

	{
		//Раскомментируйте следующие две строчки и объясните (в комментариях)
		//ошибки при компиляции 

			// const int nN=1; //сonst не позволял изменить переменную.убрала его.также эта переменная видна только внутри скобок.
	//		nN = 1; //
		//Исправьте определение константной переменной так, чтобы компилятор не выдавал ошибку
	}


	return 0;//код завершения приложения
}	// Конец функции main()

