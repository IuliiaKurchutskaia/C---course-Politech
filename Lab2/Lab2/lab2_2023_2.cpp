/*************************************************************
	Практическое занятие №2. 
	
	Инструкции (условная, выбор, циклы)
	Логические операторы, тернарный (условный) оператор 
	Побитовые операторы.
							
*************************************************************/

#include <iostream>
using namespace std;


#define	  stop __asm nop	//с помощью директивы препроцессора задаем макроподстановку
/***************************************************************/
int main()
{
// ********************************************************
	//Задание 1. Условная инструкция if-else.Переключатель switch 

	//Задание 1.1 Напишите фрагмент кода, который переводит код символа, 
	//хранящийся в переменной ch в противоположный регистр.
	//Требуется предусмотреть проверку ситуации, когда пользователь ввел цифру
	//или нажал другую клавишу, которой символ не соответствует

	//Подсказка: работаем только с символами английского алфавита, для которого в таблице
	// кодов ASCII код каждой буквы нижнего регистра на 0x20 больше кода 
	// соответствующей буквы верхнего регистра.
	
	//Обратите внимание, что в кодировочной таблице между буквами верхнего и нижнего регистра 
        //расположены некоторые иные символы
	/* {
		// Сформируйте значение переменной ch с помощью потока ввода
		char ch;
		cout << "vvedite bukby";
		cin>>ch;
		//... изменили регистр
	
		if ((ch > 0x60) && (ch < 0x7A)) {
			ch = ch - 0x20;//маленькую букву меняем на больную
			cout << ch;
		}
		else {
			if ((ch > 0x40) && (ch < 0x5A)) {
				ch = ch + 0x20;//большую меняем на маленькую
			}
			else {
				cout << "vvedite burvy";
				cout << ch;

			}
		}

		// здесь проверили в отладчике значение или вывели "эхо" на экран
		stop
	}*/
	//Задание 1.2 Напишите фрагмент кода, который реализует с помощью if (if/else)
	//следующую логику: 
	//если x меньше или равен 0, y=0
	//если x больше 0 но меньше 1, то y=x,
	//если x больше или равен 1, то y=1
	//Подумайте: какого типа должны или могут быть x и y?
	/*double y = 0;
	double x;
	{
		
		cout << "vvedite x";
		cin >> x;
		if (x <= 0) {
			 y = 0;
		}
		else if ((x>0)&&(x<1)) {
			y = x;
		}
		else if (x >= 1) {
			y = 1;
		}
		cout << "y=" << y;
	stop
	}
	*/
	//Задание 1.3 Напишите фрагмент кода, который реализует с помощью switch
	//следующую логику: 
	//в переменной cInput типа char дано значение символа,введенного любым способом.
	//Если введен символ 'y' (т.е. yes) в любом регистре, то присвоить
	//переменной у значение переменной x
	//Если введен символ 'n' (т.е. no) в любом регистре, то присвоить
	//переменной у значение (x * 2)
	//Если любой другой симол, то вывести сообщение об ошибке
	/* {
		char cInput;
		cout << "vvedite input";
		cin >> cInput;
		int z;
		int x=6;
	
		switch (cInput) {
		case 'Y':
			//z = x;
		case 'y':
			z = x;
			break;
		case 'N':
			//z = x*2;
		case 'n':
			z = x*2;
			break;
		default: cout << "error";
		}
		cout << "z=" << z;
		//сформировали значение
		//switch
	stop
	}
	*/
// ********************************************************
	//Задание 2. Логические операторы.
	// В Григорианском календаре (которым мы все пользуемся) високосный год
	// определяется по следующему алгоритму: високосным является каждый четвертый год,
	// но каждый сотый високосным НЕ является, при этом каждый 400-й год все таки 
	// високосный. Т.е. 1823 - не високосный, 1824 - високосный, 1900 - не високосный,
	// 2000 - високосный.
	// Напишите фрагмент кода, такой что:
	// логическая переменная isLeapYear принимает значение true, если год, заданный
	// переменной year - високосный.

	// Примечание: НЕ надо пользоваться инструкциями if-else, switch и тернарным оператором 
	//             НАДО написать логическое выражение в одну строку.
	//(*)если возникнут затруднения при решении задачи, то можно сначала решить ее с помощью if-else,
	// а потом уже выполнить предложенное задание.
/* {
		//int year = 1823;
		//int year = 1824;
		int year = 1900;
		//int year = 2000;

		//Вычислили значение 
		// 
		bool isLeapYear = (year % 4) == 0 && (year % 100 != 0) || (year % 400 == 0);
		// проверили значение в отладчике
		stop
	}

*/
// *******************************************************
	//Задание 3. Тернарный оператор.  
	//С помощью тернарного оператора найдите максимальное из трех значений

	//(*)если возникнут затруднения при решении задачи, то можно сначала решить ее с помощью if-else,
	// а потом уже выполнить предложенное задание.
/* {
		int a = 2;
		int b = 3;
		int c = 6;
		int max = (a > b && a > c) ? a : ((b > c) ? b : c);//если а больше чем В и больше чем С, то сравниваем А со второй частью записи, где выясняем какое число больше В или С
		cout << max;


	stop	
	}
*/
// ********************************************************
	//Задание 4. Циклы.

	//Задание 4.1 Напишите фрагмент кода, который реализует с помощью for
	//следующую логику: найти сумму заданного диапазона целых чисел.
	//Задайте границы с помощью потока ввода (или прямо в коде).
	//Предусмотрите защиту от ввода нижней границы больше, чем верхней.
/*
	{

		//1) сформировать границы диапазона
		int low;
		int high;
		int i = 0;
		cout << "Enter a low number:" << endl;
		cin >> low;
		cout << "Enter a high number:" << endl;
		cin >>high;
		int sum = 0;
		if (low > high) {
			cout << "You input error range. Inpur correct range, low shoud be less then high" << endl;
		}
		else {
			for (i=low; i <= high; i++) {
				sum = sum + i;
			}
		}
		//2) проверить корректность значений

		//3) вычислить сумму

		//4) проверить в отладчике значение (или вывести на консоль)
		
	stop
	}
*/

	//Задание 4.2 Напишите фрагмент кода, который реализует с помощью do-while
	//следующую логику: на каждой итерации цикла ввести с консоли целое значение
	// и покинуть цикл, если значение удовлетворяет условию: 
	// значение больше или равно 10 и четное.

	//Замечание: проверка на четность с использованием операции остатка от деления
	//нацело генерирует очень неэффективный код. Попробуйте реализовать альтернативный
	//вариант.

/*	{
		int x;
		bool isEven;
			do {

				cout << "input x" << endl;
				cin >> x;
				isEven = (x & 1);// Для целых чисел, если младший бит равен 1, то число нечетное 
				
				//cout << "число x" << " " << x<< " " << isEven << endl;
			} while ((x < 10) || (isEven));

	//работает на числах 2,3, 10,12.
	
	stop
	}
*/
	//Задание 4.3 Напишите фрагмент кода, который реализует с помощью while
	//следующую логику: исходно int x = 0; 
	//на каждой итерации x=x+1, sum=sum+1/x
	//найти значение x, при котором sum>1.7
/*	{
		int x = 0;
		double sum = 0;
		while (sum <= 1.7) {
			x = x + 1;
			sum = sum + 1. / x;
		}
		cout << "x=" << x << endl;
		//x 2 3 потом сравнение и выход.вывод х=3
		//sum 1.5 1.83
	stop
	}
	*/
// ********************************************************
//Задание 5 Побитовая арифметика (and, or, xor, not), сдвиги.
	//5.1 
//	{
		
	//а)Задайте значение номера бита с помощью потока ввода. Желательно контролировать корректность ввода
//		size_t num_bit;
//		cout << "input bit value:"<<endl;

//cin >> num_bit;


		
	

	//б)  в переменной val обнулите значение бита, заданного переменной num_bit  0 0 0 0 0 0 0 0 
/*																			//   7 6 5 4 3 2 1 0
		{
	char  val = 0xff;
		
			val = val & ~( 1 << num_bit);
			cout << "val=" << val << endl;;
		}
	
	stop
			
	//в)  в переменной val определите значение бита, заданного переменной num_bit	
		{


			char val = 0xAA;
	bool b = val & (1 << num_bit);
	       std::cout << val<<endl;
	


		}
			
	stop
	//г)	в переменной val установите  в 1 значение бита, заданного переменной num_bit	
		{
		char val = 0;
		val = ((1 << num_bit)| val );
		std::cout << val;
		}
	stop
	}



	*/

	//5.2 
	{
		//Если число кодируется более чем одним байтом, то важно, 
		//в каком порядке байты записываются в памяти компьютера или передаются по линиям связи.			//В архитектуре x86  используется порядок от младшего к старшему (англ. little-endian)
		//Для протоколов TCP/IP стандартным является порядок от старшего к младшему (англ. big-endian)  
		//Задайте значение x, например:

	//	int x = 0xA1B2C3D4;
	//	cout << "x=" << x << endl;
		//байты числа в памяти следуют в порядке от младшего к старшему
		//поменяйте местами байты так, чтобы они следовали в памяти в обратном порядке 
		//(от старшего к младшему)
		//Например, если x= 0xA1B2C3D4, то после перестановки получим 0xD4C3B2A1
///
	
		

	//	x =( (x << 24) | (x >> 24) & 0xff )|((x << 8) & 0x00ff0000) | ((x >> 8) & 0x0000ff00);
	
		stop
	}
			// ********************************************************
				//Задание 6 Побитовая арифметика (and, or, xor, not), сдвиги.
				//6.1 
		{
		//	int y=-2;//Задайте значение y, например, с помощью потока ввода 
		//или с помощью числового литерала в двоичном или 16-ричном виде
			
		//С помощью побитовых операторов и операторов сдвига:
		//выведите значение "y"  на консоль в двоичном виде, например:
		/*
			int i=31;
			unsigned  mask = 1 << 31;
			cout << mask;
		while(mask){
			
				//cout << mask<<endl;
			cout << ((y & mask) ? 1 :0) ;
				mask = mask >> 1;
			}
			//cout << (y & mask);
			*/
		// если y==9, то 
		// 0 0 0 0 ...   0 0 1 0 0 1 (количество двоичных цифр зависит от платформы)
		stop

		}
			//6.2
		{
			//Выведите значение "y"  на консоль в двоичном виде, 
			//пропустив незначащие нули, например:
			// если y==9, то результат  1 0 0 1
			int y = -2;
			int i = 31;
			unsigned  mask = 1 << (sizeof(y) * 8 - 1);
			//cout << mask;
			bool fl = false;
			while (mask) {

				//if (!(y & (mask >> 2))|1) {
					
				//	mask = mask >> 1;
				//}
				if (y & mask) {
					cout << 1;
					fl = true;
				}
				else {
					if (fl) {
						cout << 0;
					}
				}


				
				//cout << ((y & mask) ? 1 : 0);
				
				
				mask = mask >> 1;
				
			
			}

			stop
		}
		//6.3 (*)
		{
			//Дана целая переменная
			int y;//Задайте значение y, например, с помощью потока ввода

			//"Сдвиньте" все единицы в этой переменной вправо, например:
			//было:   0100 1111 0000 0000 0110 1111 0000 0010
			//стало:  0000 0000 0000 0000 0000 1111 1111 1111
			//Выведите на консоль полученное значение в двоичном виде ( можно на печати не разделять тетрады пробелом)

			stop
		}
		//6.4 (*)
		//Какие операции следует применить к заданному ниже операнду sNum для
		//того, чтобы переменная sRes приняла требуемое значение?

		//Замечание 1: значения подобраны таким образом, что в каждом случае достаточно
		//использовать один оператор (и при необходимости маску) 

		//Замечание 2: посредством оператора xor (подобрав соответствующую маску)
		//можно получить любое значение => этот оператор предполагается использовать
		//в том случае, когда все остальные уже "не сасают" 
		{
			short sNum = 0x8008;
			short sRes;

			//0x7ff7

			//0x8ff8

			//0x0008

			//0x7f08

			//0xf001

			//0x0010

			stop
		}
		//*********************   Дополнительное задание   ****************************************************
		//Задание 7 (*)  
		// Выполните задание 1 по курсовой работе 
		// описание задания находится в файле "Задание (игра Змейка)_1 (клавиатурный ввод)_3.docx"
		// Каждое задание выполняется в отдельном проекте
		// Рекомендация:
		// Все проекты (project), связанные с курсовой работой имеет смысл помещать в одно решение (solution)
		//*****************************************************************************************************
		return 0;//код завершения приложения
		//}	// Конец функции main()
	}
